---
import CardGallery from "@/components/CardGallery.astro";
import Layout from "@/layouts/Layout.astro";
import Portada from "@/components/Portada.astro";
---

<Layout title="GalerÃ­a">
  <main class="relative flex min-h-screen flex-col overflow-x-hidden">
    <Portada fraseGrande='"Cada Foto, Un Recuerdo Eterno."' frasePequena='"Revive cada momento con la magia de nuestros recuerdos. Cada imagen cuenta una historia, cada sonrisa un instante eterno."' img="/portada/garden.jpg"/>
    <div class="flex flex-1 justify-center py-5 px-4 md:px-40">
      <div class="flex flex-col max-w-[960px] flex-1">
        <CardGallery />
      </div>
    </div>
  </main>
</Layout>

<script type="module">
  function determineImageOrientation(img) {
    return new Promise((resolve) => {
      if (img.complete) {
        resolve(
          img.naturalWidth > img.naturalHeight ? "horizontal" : "vertical"
        );
      } else {
        img.onload = () =>
          resolve(
            img.naturalWidth > img.naturalHeight ? "horizontal" : "vertical"
          );
      }
    });
  }

  async function resizeGridItem(item) {
    const grid = document.querySelector(".gallery-grid");
    const rowHeight = parseInt(
      window.getComputedStyle(grid).getPropertyValue("grid-auto-rows")
    );
    const rowGap = parseInt(
      window.getComputedStyle(grid).getPropertyValue("grid-row-gap")
    );
    const img = item.querySelector("img");
    const orientation = await determineImageOrientation(img);

    let contentHeight;
    if (orientation === "vertical") {
      contentHeight =
        img.naturalHeight * (item.offsetWidth / img.naturalWidth) * 1.5;
    } else {
      contentHeight = img.naturalHeight * (item.offsetWidth / img.naturalWidth);
    }

    const rowSpan = Math.ceil((contentHeight + rowGap) / (rowHeight + rowGap));
    item.style.gridRowEnd = `span ${rowSpan}`;
  }

  async function resizeAllGridItems() {
    const allItems = document.getElementsByClassName("grid-item");
    for (let x = 0; x < allItems.length; x++) {
      await resizeGridItem(allItems[x]);
    }
  }

  let resizeTimeout;
  let checkInterval;

  function scheduleResize() {
    clearTimeout(resizeTimeout);
    clearInterval(checkInterval);

    resizeTimeout = setTimeout(() => {
      resizeAllGridItems();

      // Set up periodic checks
      checkInterval = setInterval(() => {
        if (document.visibilityState === "visible") {
          resizeAllGridItems();
        }
      }, 1000); // Check every second when the tab is visible
    }, 100);
  }

  function initializeGallery() {
    scheduleResize();
    window.addEventListener("resize", scheduleResize);
  }

  // Run on initial load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeGallery);
  } else {
    initializeGallery();
  }

  // Run when the page becomes visible
  document.addEventListener("visibilitychange", function () {
    if (document.visibilityState === "visible") {
      scheduleResize();
    }
  });
</script>