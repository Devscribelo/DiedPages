---
import { mensajes } from "@/lib/data";
import ButtonVerMas from "./ButtonVerMas.astro";
---


<h2 class="text-[#0e0e1b] text-2xl md:text-3xl font-bold leading-tight tracking-tight pb-6 pt-8 mx-auto text-center">
  MENSAJES DE RECUERDO
</h2>

<div class="w-full max-w-3xl mx-auto px-4">
  <div class="carousel">
    <div class="carousel-inner">
      {mensajes.slice(0, 3).map((mensaje, index) => (
        <div class="carousel-item" id={`item-${index + 1}`}>
          <div class="flex flex-col md:flex-row bg-[#0e0e1b] rounded-lg shadow-lg overflow-hidden">
            <div class="flex-shrink-0 w-full md:w-2/5 flex flex-col justify-center items-center p-4 md:p-6 border-b md:border-b-0 md:border-r border-[#a8955e]">
              <div class="rounded-full overflow-hidden w-28 h-28 md:w-32 md:h-32 lg:w-40 lg:h-40 mb-4 border-4 border-[#a8955e]">
                <div
                  class="w-full h-full bg-center bg-no-repeat bg-cover"
                  style={mensaje.img}
                />
              </div>
              <h3 class="font-dancingScript text-[#a8955e] text-lg md:text-xl lg:text-2xl font-bold leading-tight text-center">
                {mensaje.name}
              </h3>
            </div>
            <div class="flex-1 p-4 md:p-6 flex flex-col justify-center">
              <h4 class="text-[#a8955e] text-base md:text-lg lg:text-xl font-bold leading-tight tracking-tight pb-2 md:pb-3">
                Mensaje
              </h4>
              <p class="text-white text-xs md:text-sm lg:text-base font-normal leading-relaxed">
                {mensaje.remember}
              </p>
            </div>
          </div>
        </div>
      ))}
    </div>
    <div class="carousel-nav">
      <button class="prev" aria-label="Slide anterior">&#10094;</button>
      <div class="dots">
        {mensajes.slice(0, 3).map((_, index) => (
          <button class="dot" data-index={index} aria-label={`Ir al slide ${index + 1}`}></button>
        ))}
      </div>
      <button class="next" aria-label="Siguiente slide">&#10095;</button>
    </div>
  </div>
  <div class="mt-8 text-center">
    <ButtonVerMas href='/mensajes' text="VER MÁS MENSAJES" />
  </div>
</div>

<style>
  .carousel {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .carousel-inner {
    position: relative;
    width: 100%;
  }

  .carousel-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    opacity: 0;
    transition: opacity 0.5s ease;
    visibility: hidden;
  }

  .carousel-item.active {
    opacity: 1;
    visibility: visible;
    position: relative;
  }

  .carousel-nav {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 1rem;
  }

  .prev, .next {
    background: none;
    border: none;
    font-size: 1.5rem;
    color: #a8955e;
    cursor: pointer;
    padding: 0 1rem;
  }

  .dots {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #ccc;
    margin: 0 5px;
    border: none;
    cursor: pointer;
  }

  .dot.active {
    background-color: #a8955e;
  }
</style>

<script>
  function initCarousel() {
    const carouselInner = document.querySelector('.carousel-inner');
    const items = document.querySelectorAll('.carousel-item');
    const prevBtn = document.querySelector('.prev');
    const nextBtn = document.querySelector('.next');
    const dots = document.querySelectorAll('.dot');
    
    let currentIndex = 0;
    const totalItems = items.length;

    function updateCarouselHeight() {
      const activeItem = document.querySelector('.carousel-item.active');
      if (activeItem) {
        if (carouselInner && activeItem instanceof HTMLElement) {
          (carouselInner as HTMLElement).style.height = `${activeItem.offsetHeight}px`;
        }
      }
    }

    function updateCarousel() {
      items.forEach((item, index) => {
        item.classList.toggle('active', index === currentIndex);
      });
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentIndex);
      });
      updateCarouselHeight();
    }

    function nextSlide() {
      currentIndex = (currentIndex + 1) % totalItems;
      updateCarousel();
    }

    function prevSlide() {
      currentIndex = (currentIndex - 1 + totalItems) % totalItems;
      updateCarousel();
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', nextSlide);
    }
    if (prevBtn) {
      prevBtn.addEventListener('click', prevSlide);
    }

    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = index;
        updateCarousel();
      });
    });

    // Avance automático del carrusel
    let intervalId = setInterval(nextSlide, 5000);

    // Pausar el avance automático en interacción del usuario
    const carousel = document.querySelector('.carousel');
    if (carousel) {
      carousel.addEventListener('mouseenter', () => clearInterval(intervalId));
      carousel.addEventListener('mouseleave', () => {
        clearInterval(intervalId);
        intervalId = setInterval(nextSlide, 5000);
      });
    }

    // Actualización inicial
    updateCarousel();

    // Ajustar altura en cambio de tamaño de ventana
    window.addEventListener('resize', updateCarouselHeight);
  }

  // Ejecutar la inicialización cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', initCarousel);

  // Para Astro: También ejecutar cuando se navega entre páginas
  document.addEventListener('astro:page-load', initCarousel);
</script>